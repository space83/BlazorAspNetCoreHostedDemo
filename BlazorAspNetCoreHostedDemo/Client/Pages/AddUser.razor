@page "/adduser"
@attribute [Authorize(Roles = "Administrator,User")]
@using BlazorAspNetCoreHostedDemo.Shared
@using System.Net;
@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js

<PageTitle>Add User</PageTitle>
<h3>Add User</h3>


<EditForm Model="@newUser" OnValidSubmit="@AddNewUser">
    <div class="row">
        <div class="col-lg-12 offset-lg-12 pt-12 pb-12 border">
            <br />
            <DataAnnotationsValidator />
            <div class="mb-3 col-md-3">
                <label>User Name</label>
                <input type="text" class="form-control" placeholder="User Name" @bind="newUser.UserName" />
                <ValidationMessage For="@(() => newUser.UserName)" />
            </div>

            <div class="mb-3 col-md-3">
                <label>Password:</label>
                <input type="password" class="form-control" placeholder="Password" @bind="newUser.Password" />
                <ValidationMessage For="@(() => newUser.Password)" />
            </div>

            <div class="mb-3 col-md-3">
                <label>Role:</label>
                <select class="form-select" aria-label="Select Role" @bind="newUser.Role">
                    <option value=null>--Select Role--</option>
                    <option value="Administrator">Administrator</option>
                    <option value="User">User</option>
                </select>
                <ValidationMessage For="@(() => newUser.Role)" />
            </div>

            <div class="mb-3 col-md-6">
                <label>First Name:</label>
                <input type="text" class="form-control" placeholder="First Name" @bind="newUser.FirstName" />
            </div>

            <div class="mb-3 col-md-6">
                <label>Last Name:</label>
                <input type="text" class="form-control" placeholder="Last Name" @bind="newUser.LastName" />
            </div>

            <div class="mb-3 col-md-6">
                <label>Email:</label>
                <input type="text" class="form-control" placeholder="Email" @bind="newUser.Email" />
                <ValidationMessage For="@(() => newUser.Email)" />
            </div>

            <div class="mb-3 col-md-2">
                <label>Gender:</label>
                <InputSelect class="form-select" aria-label="Select Gender" @bind-Value="newUser.Gender">
                    <option value="">--Select Gender--</option>
                    @foreach (var p in Enum.GetValues(typeof(Gender)))
                    {
                        <option value="@p">@p</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3 col-md-3">
                <label>Contact No:</label>
                <input type="text" class="form-control" @bind="newUser.ContactNo" />
            </div>

            <div class="mb-3 col-md-3">
                <label>Country:</label>
                <InputSelect class="form-select" aria-label="Select Country" @bind-Value="newUser.Country">
                    <option value="">--Select Country--</option>
                    @foreach (var p in Enum.GetValues(typeof(Country)))
                    {
                        <option value="@p">@p</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </div>
        <br />
    </div>
    <br />
    <br />
</EditForm>


@code {
    private UserAccount newUser = new();
   

    private async Task AddNewUser()
    {
        var result = await httpClient.PostAsJsonAsync<UserAccount>("api/Account/AddUser", newUser);
        if (result.StatusCode == HttpStatusCode.OK)
        {
            navManager.NavigateTo("userlist", true);
        }
        
        else
        {
            await js.InvokeVoidAsync("alert", "Error add user.");
            return;
        }
    }


}

@page "/editproductpage/{productId:int}"
@attribute [Authorize(Roles = "Administrator,User")]
@using BlazorAspNetCoreHostedDemo.Shared
@using System.Net;
@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js


<style>
    .right {
        float: right;
    }
</style>


@if (editProduct == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <PageTitle>Edit Product</PageTitle>
    <h3>Edit Product</h3>


    <div class="row">

        <div class="col-lg-12 offset-lg-12 pt-12 pb-12 border">
            <div class="mb-3 col-md-6">
                <label>Name</label>
                <input type="text" class="form-control" @bind="editProduct.Name" />
            </div>

            <div class="mb-3">
                <label>Description</label>
                <textarea type="text" class="form-control" rows="3" @bind="editProduct.Description" />
            </div>

            <div class="mb-3">
                <label>Picture</label>
                <input type="text" class="form-control" @bind="editProduct.Pictures" />
            </div>

            <div class="form-row">
                <div class="mb-3 col-md-4">
                    <label>Price From</label>
                    <input type="number" class="form-control" @bind="editProduct.Price1" />
                </div>

                <div class="mb-3 col-md-4">
                    <label>Price To</label>
                    <input type="number" class="form-control" @bind="editProduct.Price2" />
                </div>
            </div>

            <div class="mb-3">
                <button class="btn btn-primary" @onclick="UpdateProduct">Update</button>
            </div>
        </div>
    </div>

    <br />
    <div class="right">
        <NavLink class="nav-link" href="products">
            <button class="btn btn-primary">Back</button>
        </NavLink>
    </div>
}


@code {
    [Parameter]
    public int productId { get; set; }

    private Product? editProduct;

    protected override async Task OnInitializedAsync()
    {
        editProduct = await httpClient.GetFromJsonAsync<Product>($"api/Product/GetProduct?productCode={productId}");
        await base.OnInitializedAsync();
    }

    private async Task UpdateProduct()
    {
        var result = await httpClient.PostAsJsonAsync<Product?>("api/Product/UpdateProduct", editProduct);
        if (result.StatusCode == HttpStatusCode.OK)
        {
            navManager.NavigateTo("products", true);
        }
        
        else
        {
            await js.InvokeVoidAsync("alert", "Error update product.");
            return;
        }
    }


}
